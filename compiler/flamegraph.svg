<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1013.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="92"><g><title>compiler`std::rt::lang_start::_{{closure}} (1 samples, 1.09%)</title><rect x="0.0000%" y="933" width="1.0870%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="943.50"></text></g><g><title>compiler`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (30 samples, 32.61%)</title><rect x="1.0870%" y="741" width="32.6087%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="30"/><text x="1.3370%" y="751.50">compiler`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A..</text></g><g><title>compiler`&lt;general::span::char_iter::CharIndexIter&lt;S&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 32.61%)</title><rect x="1.0870%" y="725" width="32.6087%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="30"/><text x="1.3370%" y="735.50">compiler`&lt;general::span::char_iter::CharIndexIter&lt;S&gt; ..</text></g><g><title>compiler`preprocessor::preprocess (45 samples, 48.91%)</title><rect x="1.0870%" y="837" width="48.9130%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="45"/><text x="1.3370%" y="847.50">compiler`preprocessor::preprocess</text></g><g><title>compiler`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (45 samples, 48.91%)</title><rect x="1.0870%" y="821" width="48.9130%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="45"/><text x="1.3370%" y="831.50">compiler`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::..</text></g><g><title>compiler`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (45 samples, 48.91%)</title><rect x="1.0870%" y="805" width="48.9130%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="45"/><text x="1.3370%" y="815.50">compiler`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::I..</text></g><g><title>compiler`&lt;preprocessor::resolver::ResolveIterator&lt;I,L&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 48.91%)</title><rect x="1.0870%" y="789" width="48.9130%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="45"/><text x="1.3370%" y="799.50">compiler`&lt;preprocessor::resolver::ResolveIterator&lt;I,L&gt; as core::iter::traits::it..</text></g><g><title>compiler`&lt;preprocessor::pir::PirIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 48.91%)</title><rect x="1.0870%" y="773" width="48.9130%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="45"/><text x="1.3370%" y="783.50">compiler`&lt;preprocessor::pir::PirIterator&lt;I&gt; as core::iter::traits::iterator::Ite..</text></g><g><title>compiler`&lt;tokenizer::iter::TokenIter as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 48.91%)</title><rect x="1.0870%" y="757" width="48.9130%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="45"/><text x="1.3370%" y="767.50">compiler`&lt;tokenizer::iter::TokenIter as core::iter::traits::iterator::Iterator&gt;:..</text></g><g><title>compiler`&lt;general::span::char_iter::CharIndexIter&lt;S&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 16.30%)</title><rect x="33.6957%" y="741" width="16.3043%" height="15" fill="rgb(220,122,19)" fg:x="31" fg:w="15"/><text x="33.9457%" y="751.50">compiler`&lt;general::span::..</text></g><g><title>compiler`alloc::slice::hack::to_vec (1 samples, 1.09%)</title><rect x="50.0000%" y="805" width="1.0870%" height="15" fill="rgb(250,228,42)" fg:x="46" fg:w="1"/><text x="50.2500%" y="815.50"></text></g><g><title>compiler`&lt;semantic::astatement::target::AAssignTarget as core::clone::Clone&gt;::clone (1 samples, 1.09%)</title><rect x="50.0000%" y="789" width="1.0870%" height="15" fill="rgb(240,193,28)" fg:x="46" fg:w="1"/><text x="50.2500%" y="799.50"></text></g><g><title>compiler`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 1.09%)</title><rect x="50.0000%" y="773" width="1.0870%" height="15" fill="rgb(216,20,37)" fg:x="46" fg:w="1"/><text x="50.2500%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 1.09%)</title><rect x="50.0000%" y="757" width="1.0870%" height="15" fill="rgb(206,188,39)" fg:x="46" fg:w="1"/><text x="50.2500%" y="767.50"></text></g><g><title>compiler`semantic::aexpression::functioncall::FunctionCall::to_standalone_ir (1 samples, 1.09%)</title><rect x="51.0870%" y="741" width="1.0870%" height="15" fill="rgb(217,207,13)" fg:x="47" fg:w="1"/><text x="51.3370%" y="751.50"></text></g><g><title>compiler`semantic::aexpression::functioncall::FunctionCall::argument_ir (1 samples, 1.09%)</title><rect x="51.0870%" y="725" width="1.0870%" height="15" fill="rgb(231,73,38)" fg:x="47" fg:w="1"/><text x="51.3370%" y="735.50"></text></g><g><title>compiler`semantic::aexpression::AExpression::to_ir (1 samples, 1.09%)</title><rect x="51.0870%" y="709" width="1.0870%" height="15" fill="rgb(225,20,46)" fg:x="47" fg:w="1"/><text x="51.3370%" y="719.50"></text></g><g><title>compiler`semantic::aexpression::literal::Literal::to_value (1 samples, 1.09%)</title><rect x="51.0870%" y="693" width="1.0870%" height="15" fill="rgb(210,31,41)" fg:x="47" fg:w="1"/><text x="51.3370%" y="703.50"></text></g><g><title>compiler`&lt;ir::variable::Variable as core::clone::Clone&gt;::clone (1 samples, 1.09%)</title><rect x="51.0870%" y="677" width="1.0870%" height="15" fill="rgb(221,200,47)" fg:x="47" fg:w="1"/><text x="51.3370%" y="687.50"></text></g><g><title>compiler`DYLD-STUB$$memcpy (1 samples, 1.09%)</title><rect x="51.0870%" y="661" width="1.0870%" height="15" fill="rgb(226,26,5)" fg:x="47" fg:w="1"/><text x="51.3370%" y="671.50"></text></g><g><title>compiler`semantic::AAST::convert_to_ir (3 samples, 3.26%)</title><rect x="50.0000%" y="837" width="3.2609%" height="15" fill="rgb(249,33,26)" fg:x="46" fg:w="3"/><text x="50.2500%" y="847.50">com..</text></g><g><title>compiler`semantic::conversion::convert (3 samples, 3.26%)</title><rect x="50.0000%" y="821" width="3.2609%" height="15" fill="rgb(235,183,28)" fg:x="46" fg:w="3"/><text x="50.2500%" y="831.50">com..</text></g><g><title>compiler`semantic::scope::AScope::to_ir (2 samples, 2.17%)</title><rect x="51.0870%" y="805" width="2.1739%" height="15" fill="rgb(221,5,38)" fg:x="47" fg:w="2"/><text x="51.3370%" y="815.50">c..</text></g><g><title>compiler`semantic::astatement::AStatement::to_ir (2 samples, 2.17%)</title><rect x="51.0870%" y="789" width="2.1739%" height="15" fill="rgb(247,18,42)" fg:x="47" fg:w="2"/><text x="51.3370%" y="799.50">c..</text></g><g><title>compiler`semantic::scope::AScope::to_ir (2 samples, 2.17%)</title><rect x="51.0870%" y="773" width="2.1739%" height="15" fill="rgb(241,131,45)" fg:x="47" fg:w="2"/><text x="51.3370%" y="783.50">c..</text></g><g><title>compiler`semantic::astatement::AStatement::to_ir (2 samples, 2.17%)</title><rect x="51.0870%" y="757" width="2.1739%" height="15" fill="rgb(249,31,29)" fg:x="47" fg:w="2"/><text x="51.3370%" y="767.50">c..</text></g><g><title>compiler`semantic::astatement::target::ArrayAccessTarget::to_exp (1 samples, 1.09%)</title><rect x="52.1739%" y="741" width="1.0870%" height="15" fill="rgb(225,111,53)" fg:x="48" fg:w="1"/><text x="52.4239%" y="751.50"></text></g><g><title>compiler`semantic::astatement::target::AAssignTarget::base_target_address (1 samples, 1.09%)</title><rect x="52.1739%" y="725" width="1.0870%" height="15" fill="rgb(238,160,17)" fg:x="48" fg:w="1"/><text x="52.4239%" y="735.50"></text></g><g><title>compiler`semantic::astatement::target::AAssignTarget::base_target_address (1 samples, 1.09%)</title><rect x="52.1739%" y="709" width="1.0870%" height="15" fill="rgb(214,148,48)" fg:x="48" fg:w="1"/><text x="52.4239%" y="719.50"></text></g><g><title>compiler`semantic::aexpression::AExpression::to_ir (1 samples, 1.09%)</title><rect x="52.1739%" y="693" width="1.0870%" height="15" fill="rgb(232,36,49)" fg:x="48" fg:w="1"/><text x="52.4239%" y="703.50"></text></g><g><title>compiler`ir::block::BasicBlock::definition (1 samples, 1.09%)</title><rect x="52.1739%" y="677" width="1.0870%" height="15" fill="rgb(209,103,24)" fg:x="48" fg:w="1"/><text x="52.4239%" y="687.50"></text></g><g><title>compiler`ir::block::BasicBlock::definition (1 samples, 1.09%)</title><rect x="52.1739%" y="661" width="1.0870%" height="15" fill="rgb(229,88,8)" fg:x="48" fg:w="1"/><text x="52.4239%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 1.09%)</title><rect x="52.1739%" y="645" width="1.0870%" height="15" fill="rgb(213,181,19)" fg:x="48" fg:w="1"/><text x="52.4239%" y="655.50"></text></g><g><title>compiler`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 53.26%)</title><rect x="1.0870%" y="853" width="53.2609%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="49"/><text x="1.3370%" y="863.50">compiler`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;..</text></g><g><title>compiler`syntax::parse (1 samples, 1.09%)</title><rect x="53.2609%" y="837" width="1.0870%" height="15" fill="rgb(241,83,37)" fg:x="49" fg:w="1"/><text x="53.5109%" y="847.50"></text></g><g><title>compiler`syntax::scope::Scope::parse (1 samples, 1.09%)</title><rect x="53.2609%" y="821" width="1.0870%" height="15" fill="rgb(233,36,39)" fg:x="49" fg:w="1"/><text x="53.5109%" y="831.50"></text></g><g><title>compiler`syntax::statement::starting_type::parse (1 samples, 1.09%)</title><rect x="53.2609%" y="805" width="1.0870%" height="15" fill="rgb(226,3,54)" fg:x="49" fg:w="1"/><text x="53.5109%" y="815.50"></text></g><g><title>compiler`syntax::scope::Scope::parse (1 samples, 1.09%)</title><rect x="53.2609%" y="789" width="1.0870%" height="15" fill="rgb(245,192,40)" fg:x="49" fg:w="1"/><text x="53.5109%" y="799.50"></text></g><g><title>compiler`syntax::statement::starting_literal::parse (1 samples, 1.09%)</title><rect x="53.2609%" y="773" width="1.0870%" height="15" fill="rgb(238,167,29)" fg:x="49" fg:w="1"/><text x="53.5109%" y="783.50"></text></g><g><title>compiler`syntax::expression::Expression::parse_internal (1 samples, 1.09%)</title><rect x="53.2609%" y="757" width="1.0870%" height="15" fill="rgb(232,182,51)" fg:x="49" fg:w="1"/><text x="53.5109%" y="767.50"></text></g><g><title>compiler`syntax::expression::Expression::parse_exp_list (1 samples, 1.09%)</title><rect x="53.2609%" y="741" width="1.0870%" height="15" fill="rgb(231,60,39)" fg:x="49" fg:w="1"/><text x="53.5109%" y="751.50"></text></g><g><title>compiler`syntax::expression::Expression::parse_internal (1 samples, 1.09%)</title><rect x="53.2609%" y="725" width="1.0870%" height="15" fill="rgb(208,69,12)" fg:x="49" fg:w="1"/><text x="53.5109%" y="735.50"></text></g><g><title>compiler`backend::backends::aarch64_mac::Backend::codegen (1 samples, 1.09%)</title><rect x="54.3478%" y="821" width="1.0870%" height="15" fill="rgb(235,93,37)" fg:x="50" fg:w="1"/><text x="54.5978%" y="831.50"></text></g><g><title>compiler`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 1.09%)</title><rect x="54.3478%" y="805" width="1.0870%" height="15" fill="rgb(213,116,39)" fg:x="50" fg:w="1"/><text x="54.5978%" y="815.50"></text></g><g><title>compiler`backend::backends::aarch64_mac::codegen::to_asm::block_to_asm (1 samples, 1.09%)</title><rect x="54.3478%" y="789" width="1.0870%" height="15" fill="rgb(222,207,29)" fg:x="50" fg:w="1"/><text x="54.5978%" y="799.50"></text></g><g><title>compiler`std::io::stdio::_eprint (1 samples, 1.09%)</title><rect x="54.3478%" y="773" width="1.0870%" height="15" fill="rgb(206,96,30)" fg:x="50" fg:w="1"/><text x="54.5978%" y="783.50"></text></g><g><title>compiler`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (1 samples, 1.09%)</title><rect x="54.3478%" y="757" width="1.0870%" height="15" fill="rgb(218,138,4)" fg:x="50" fg:w="1"/><text x="54.5978%" y="767.50"></text></g><g><title>compiler`core::fmt::write (1 samples, 1.09%)</title><rect x="54.3478%" y="741" width="1.0870%" height="15" fill="rgb(250,191,14)" fg:x="50" fg:w="1"/><text x="54.5978%" y="751.50"></text></g><g><title>compiler`&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 1.09%)</title><rect x="54.3478%" y="725" width="1.0870%" height="15" fill="rgb(239,60,40)" fg:x="50" fg:w="1"/><text x="54.5978%" y="735.50"></text></g><g><title>compiler`core::fmt::builders::DebugSet::entry (1 samples, 1.09%)</title><rect x="54.3478%" y="709" width="1.0870%" height="15" fill="rgb(206,27,48)" fg:x="50" fg:w="1"/><text x="54.5978%" y="719.50"></text></g><g><title>compiler`core::fmt::builders::DebugInner::entry (1 samples, 1.09%)</title><rect x="54.3478%" y="693" width="1.0870%" height="15" fill="rgb(225,35,8)" fg:x="50" fg:w="1"/><text x="54.5978%" y="703.50"></text></g><g><title>compiler`ir::statement::_&lt;impl core::fmt::Debug for ir::general::statement::Statement&lt;ir::block::BasicBlock,ir::block::weak::WeakBlockPtr&gt;&gt;::fmt (1 samples, 1.09%)</title><rect x="54.3478%" y="677" width="1.0870%" height="15" fill="rgb(250,213,24)" fg:x="50" fg:w="1"/><text x="54.5978%" y="687.50"></text></g><g><title>compiler`core::fmt::builders::DebugStruct::field (1 samples, 1.09%)</title><rect x="54.3478%" y="661" width="1.0870%" height="15" fill="rgb(247,123,22)" fg:x="50" fg:w="1"/><text x="54.5978%" y="671.50"></text></g><g><title>compiler`&lt;ir::variable::Variable as core::fmt::Debug&gt;::fmt (1 samples, 1.09%)</title><rect x="54.3478%" y="645" width="1.0870%" height="15" fill="rgb(231,138,38)" fg:x="50" fg:w="1"/><text x="54.5978%" y="655.50"></text></g><g><title>compiler`core::fmt::builders::DebugStruct::field (1 samples, 1.09%)</title><rect x="54.3478%" y="629" width="1.0870%" height="15" fill="rgb(231,145,46)" fg:x="50" fg:w="1"/><text x="54.5978%" y="639.50"></text></g><g><title>compiler`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 1.09%)</title><rect x="54.3478%" y="613" width="1.0870%" height="15" fill="rgb(251,118,11)" fg:x="50" fg:w="1"/><text x="54.5978%" y="623.50"></text></g><g><title>compiler`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 1.09%)</title><rect x="54.3478%" y="597" width="1.0870%" height="15" fill="rgb(217,147,25)" fg:x="50" fg:w="1"/><text x="54.5978%" y="607.50"></text></g><g><title>compiler`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 1.09%)</title><rect x="54.3478%" y="581" width="1.0870%" height="15" fill="rgb(247,81,37)" fg:x="50" fg:w="1"/><text x="54.5978%" y="591.50"></text></g><g><title>compiler`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 1.09%)</title><rect x="54.3478%" y="565" width="1.0870%" height="15" fill="rgb(209,12,38)" fg:x="50" fg:w="1"/><text x="54.5978%" y="575.50"></text></g><g><title>compiler`&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (1 samples, 1.09%)</title><rect x="54.3478%" y="549" width="1.0870%" height="15" fill="rgb(227,1,9)" fg:x="50" fg:w="1"/><text x="54.5978%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 1.09%)</title><rect x="54.3478%" y="533" width="1.0870%" height="15" fill="rgb(248,47,43)" fg:x="50" fg:w="1"/><text x="54.5978%" y="543.50"></text></g><g><title>compiler`ir::function::FunctionDefinition::interference_graph (1 samples, 1.09%)</title><rect x="55.4348%" y="805" width="1.0870%" height="15" fill="rgb(221,10,30)" fg:x="51" fg:w="1"/><text x="55.6848%" y="815.50"></text></g><g><title>compiler`ir::block::BasicBlock::interference_graph (1 samples, 1.09%)</title><rect x="55.4348%" y="789" width="1.0870%" height="15" fill="rgb(210,229,1)" fg:x="51" fg:w="1"/><text x="55.6848%" y="799.50"></text></g><g><title>compiler`ir::block::BasicBlock::following_uses (1 samples, 1.09%)</title><rect x="55.4348%" y="773" width="1.0870%" height="15" fill="rgb(222,148,37)" fg:x="51" fg:w="1"/><text x="55.6848%" y="783.50"></text></g><g><title>compiler`ir::block::BasicBlock::block_used_vars (1 samples, 1.09%)</title><rect x="55.4348%" y="757" width="1.0870%" height="15" fill="rgb(234,67,33)" fg:x="51" fg:w="1"/><text x="55.6848%" y="767.50"></text></g><g><title>compiler`ir::interference::DefaultInterferenceGraph::neighbours (1 samples, 1.09%)</title><rect x="56.5217%" y="805" width="1.0870%" height="15" fill="rgb(247,98,35)" fg:x="52" fg:w="1"/><text x="56.7717%" y="815.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 1.09%)</title><rect x="56.5217%" y="789" width="1.0870%" height="15" fill="rgb(247,138,52)" fg:x="52" fg:w="1"/><text x="56.7717%" y="799.50"></text></g><g><title>compiler`ir::block::BasicBlock::get_statements (1 samples, 1.09%)</title><rect x="57.6087%" y="789" width="1.0870%" height="15" fill="rgb(213,79,30)" fg:x="53" fg:w="1"/><text x="57.8587%" y="799.50"></text></g><g><title>compiler`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 1.09%)</title><rect x="57.6087%" y="773" width="1.0870%" height="15" fill="rgb(246,177,23)" fg:x="53" fg:w="1"/><text x="57.8587%" y="783.50"></text></g><g><title>compiler`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.09%)</title><rect x="58.6957%" y="725" width="1.0870%" height="15" fill="rgb(230,62,27)" fg:x="54" fg:w="1"/><text x="58.9457%" y="735.50"></text></g><g><title>compiler`&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 1.09%)</title><rect x="59.7826%" y="677" width="1.0870%" height="15" fill="rgb(216,154,8)" fg:x="55" fg:w="1"/><text x="60.0326%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 1.09%)</title><rect x="59.7826%" y="661" width="1.0870%" height="15" fill="rgb(244,35,45)" fg:x="55" fg:w="1"/><text x="60.0326%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 1.09%)</title><rect x="59.7826%" y="645" width="1.0870%" height="15" fill="rgb(251,115,12)" fg:x="55" fg:w="1"/><text x="60.0326%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 1.09%)</title><rect x="59.7826%" y="629" width="1.0870%" height="15" fill="rgb(240,54,50)" fg:x="55" fg:w="1"/><text x="60.0326%" y="639.50"></text></g><g><title>compiler`ir::expression::Expression::used_vars (2 samples, 2.17%)</title><rect x="59.7826%" y="709" width="2.1739%" height="15" fill="rgb(233,84,52)" fg:x="55" fg:w="2"/><text x="60.0326%" y="719.50">c..</text></g><g><title>compiler`ir::expression::Operand::used_vars (2 samples, 2.17%)</title><rect x="59.7826%" y="693" width="2.1739%" height="15" fill="rgb(207,117,47)" fg:x="55" fg:w="2"/><text x="60.0326%" y="703.50">c..</text></g><g><title>compiler`&lt;ir::ty::Type as core::clone::Clone&gt;::clone (1 samples, 1.09%)</title><rect x="60.8696%" y="677" width="1.0870%" height="15" fill="rgb(249,43,39)" fg:x="56" fg:w="1"/><text x="61.1196%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 1.09%)</title><rect x="60.8696%" y="661" width="1.0870%" height="15" fill="rgb(209,38,44)" fg:x="56" fg:w="1"/><text x="61.1196%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 1.09%)</title><rect x="60.8696%" y="645" width="1.0870%" height="15" fill="rgb(236,212,23)" fg:x="56" fg:w="1"/><text x="61.1196%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 1.09%)</title><rect x="60.8696%" y="629" width="1.0870%" height="15" fill="rgb(242,79,21)" fg:x="56" fg:w="1"/><text x="61.1196%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 1.09%)</title><rect x="60.8696%" y="613" width="1.0870%" height="15" fill="rgb(211,96,35)" fg:x="56" fg:w="1"/><text x="61.1196%" y="623.50"></text></g><g><title>compiler`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 5.43%)</title><rect x="58.6957%" y="741" width="5.4348%" height="15" fill="rgb(253,215,40)" fg:x="54" fg:w="5"/><text x="58.9457%" y="751.50">compile..</text></g><g><title>compiler`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 4.35%)</title><rect x="59.7826%" y="725" width="4.3478%" height="15" fill="rgb(211,81,21)" fg:x="55" fg:w="4"/><text x="60.0326%" y="735.50">compi..</text></g><g><title>compiler`ir::general::statement::Statement&lt;B,WB&gt;::used_vars (2 samples, 2.17%)</title><rect x="61.9565%" y="709" width="2.1739%" height="15" fill="rgb(208,190,38)" fg:x="57" fg:w="2"/><text x="62.2065%" y="719.50">c..</text></g><g><title>compiler`ir::expression::Operand::used_vars (1 samples, 1.09%)</title><rect x="63.0435%" y="693" width="1.0870%" height="15" fill="rgb(235,213,38)" fg:x="58" fg:w="1"/><text x="63.2935%" y="703.50"></text></g><g><title>compiler`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 1.09%)</title><rect x="64.1304%" y="741" width="1.0870%" height="15" fill="rgb(237,122,38)" fg:x="59" fg:w="1"/><text x="64.3804%" y="751.50"></text></g><g><title>compiler`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (3 samples, 3.26%)</title><rect x="65.2174%" y="741" width="3.2609%" height="15" fill="rgb(244,218,35)" fg:x="60" fg:w="3"/><text x="65.4674%" y="751.50">com..</text></g><g><title>compiler`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 3.26%)</title><rect x="65.2174%" y="725" width="3.2609%" height="15" fill="rgb(240,68,47)" fg:x="60" fg:w="3"/><text x="65.4674%" y="735.50">com..</text></g><g><title>compiler`core::ptr::drop_in_place&lt;ir::variable::Variable&gt; (1 samples, 1.09%)</title><rect x="67.3913%" y="709" width="1.0870%" height="15" fill="rgb(210,16,53)" fg:x="62" fg:w="1"/><text x="67.6413%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 1.09%)</title><rect x="67.3913%" y="693" width="1.0870%" height="15" fill="rgb(235,124,12)" fg:x="62" fg:w="1"/><text x="67.6413%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 1.09%)</title><rect x="67.3913%" y="677" width="1.0870%" height="15" fill="rgb(224,169,11)" fg:x="62" fg:w="1"/><text x="67.6413%" y="687.50"></text></g><g><title>compiler`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (12 samples, 13.04%)</title><rect x="58.6957%" y="757" width="13.0435%" height="15" fill="rgb(250,166,2)" fg:x="54" fg:w="12"/><text x="58.9457%" y="767.50">compiler`&lt;alloc::col..</text></g><g><title>compiler`alloc::slice::merge_sort (3 samples, 3.26%)</title><rect x="68.4783%" y="741" width="3.2609%" height="15" fill="rgb(242,216,29)" fg:x="63" fg:w="3"/><text x="68.7283%" y="751.50">com..</text></g><g><title>compiler`DYLD-STUB$$memcmp (1 samples, 1.09%)</title><rect x="70.6522%" y="725" width="1.0870%" height="15" fill="rgb(230,116,27)" fg:x="65" fg:w="1"/><text x="70.9022%" y="735.50"></text></g><g><title>compiler`alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (2 samples, 2.17%)</title><rect x="71.7391%" y="741" width="2.1739%" height="15" fill="rgb(228,99,48)" fg:x="66" fg:w="2"/><text x="71.9891%" y="751.50">c..</text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 2.17%)</title><rect x="71.7391%" y="725" width="2.1739%" height="15" fill="rgb(253,11,6)" fg:x="66" fg:w="2"/><text x="71.9891%" y="735.50">l..</text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 1.09%)</title><rect x="72.8261%" y="709" width="1.0870%" height="15" fill="rgb(247,143,39)" fg:x="67" fg:w="1"/><text x="73.0761%" y="719.50"></text></g><g><title>compiler`core::ptr::drop_in_place&lt;ir::variable::Variable&gt; (3 samples, 3.26%)</title><rect x="73.9130%" y="741" width="3.2609%" height="15" fill="rgb(236,97,10)" fg:x="68" fg:w="3"/><text x="74.1630%" y="751.50">com..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 1.09%)</title><rect x="76.0870%" y="725" width="1.0870%" height="15" fill="rgb(233,208,19)" fg:x="70" fg:w="1"/><text x="76.3370%" y="735.50"></text></g><g><title>compiler`register_allocation::spilling::intialize_register_sets (19 samples, 20.65%)</title><rect x="57.6087%" y="805" width="20.6522%" height="15" fill="rgb(216,164,2)" fg:x="53" fg:w="19"/><text x="57.8587%" y="815.50">compiler`register_allocation::spi..</text></g><g><title>compiler`register_allocation::spilling::min::min_algorithm (18 samples, 19.57%)</title><rect x="58.6957%" y="789" width="19.5652%" height="15" fill="rgb(220,129,5)" fg:x="54" fg:w="18"/><text x="58.9457%" y="799.50">compiler`register_allocation::s..</text></g><g><title>compiler`register_allocation::spilling::limit (18 samples, 19.57%)</title><rect x="58.6957%" y="773" width="19.5652%" height="15" fill="rgb(242,17,10)" fg:x="54" fg:w="18"/><text x="58.9457%" y="783.50">compiler`register_allocation::s..</text></g><g><title>compiler`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 6.52%)</title><rect x="71.7391%" y="757" width="6.5217%" height="15" fill="rgb(242,107,0)" fg:x="66" fg:w="6"/><text x="71.9891%" y="767.50">compiler`..</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 1.09%)</title><rect x="77.1739%" y="741" width="1.0870%" height="15" fill="rgb(251,28,31)" fg:x="71" fg:w="1"/><text x="77.4239%" y="751.50"></text></g><g><title>compiler`&lt;ir::variable::Variable as core::fmt::Debug&gt;::fmt (1 samples, 1.09%)</title><rect x="78.2609%" y="757" width="1.0870%" height="15" fill="rgb(233,223,10)" fg:x="72" fg:w="1"/><text x="78.5109%" y="767.50"></text></g><g><title>compiler`core::fmt::builders::DebugStruct::field (1 samples, 1.09%)</title><rect x="78.2609%" y="741" width="1.0870%" height="15" fill="rgb(215,21,27)" fg:x="72" fg:w="1"/><text x="78.5109%" y="751.50"></text></g><g><title>compiler`&lt;ir::ty::Type as core::fmt::Debug&gt;::fmt (1 samples, 1.09%)</title><rect x="78.2609%" y="725" width="1.0870%" height="15" fill="rgb(232,23,21)" fg:x="72" fg:w="1"/><text x="78.5109%" y="735.50"></text></g><g><title>compiler`core::fmt::builders::DebugTuple::field (1 samples, 1.09%)</title><rect x="78.2609%" y="709" width="1.0870%" height="15" fill="rgb(244,5,23)" fg:x="72" fg:w="1"/><text x="78.5109%" y="719.50"></text></g><g><title>compiler`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 1.09%)</title><rect x="78.2609%" y="693" width="1.0870%" height="15" fill="rgb(226,81,46)" fg:x="72" fg:w="1"/><text x="78.5109%" y="703.50"></text></g><g><title>compiler`&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 1.09%)</title><rect x="78.2609%" y="677" width="1.0870%" height="15" fill="rgb(247,70,30)" fg:x="72" fg:w="1"/><text x="78.5109%" y="687.50"></text></g><g><title>compiler`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 1.09%)</title><rect x="78.2609%" y="661" width="1.0870%" height="15" fill="rgb(212,68,19)" fg:x="72" fg:w="1"/><text x="78.5109%" y="671.50"></text></g><g><title>compiler`&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (1 samples, 1.09%)</title><rect x="78.2609%" y="645" width="1.0870%" height="15" fill="rgb(240,187,13)" fg:x="72" fg:w="1"/><text x="78.5109%" y="655.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 1.09%)</title><rect x="78.2609%" y="629" width="1.0870%" height="15" fill="rgb(223,113,26)" fg:x="72" fg:w="1"/><text x="78.5109%" y="639.50"></text></g><g><title>compiler`&lt;backend::backends::aarch64_mac::Backend as backend::backends::Target&gt;::generate (24 samples, 26.09%)</title><rect x="54.3478%" y="837" width="26.0870%" height="15" fill="rgb(206,192,2)" fg:x="50" fg:w="24"/><text x="54.5978%" y="847.50">compiler`&lt;backend::backends::aarch64_mac::..</text></g><g><title>compiler`register_allocation::RegisterMapping&lt;R&gt;::allocate (23 samples, 25.00%)</title><rect x="55.4348%" y="821" width="25.0000%" height="15" fill="rgb(241,108,4)" fg:x="51" fg:w="23"/><text x="55.6848%" y="831.50">compiler`register_allocation::RegisterMa..</text></g><g><title>compiler`std::io::stdio::_eprint (2 samples, 2.17%)</title><rect x="78.2609%" y="805" width="2.1739%" height="15" fill="rgb(247,173,49)" fg:x="72" fg:w="2"/><text x="78.5109%" y="815.50">c..</text></g><g><title>compiler`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (2 samples, 2.17%)</title><rect x="78.2609%" y="789" width="2.1739%" height="15" fill="rgb(224,114,35)" fg:x="72" fg:w="2"/><text x="78.5109%" y="799.50">c..</text></g><g><title>compiler`core::fmt::write (2 samples, 2.17%)</title><rect x="78.2609%" y="773" width="2.1739%" height="15" fill="rgb(245,159,27)" fg:x="72" fg:w="2"/><text x="78.5109%" y="783.50">c..</text></g><g><title>compiler`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 1.09%)</title><rect x="79.3478%" y="757" width="1.0870%" height="15" fill="rgb(245,172,44)" fg:x="73" fg:w="1"/><text x="79.5978%" y="767.50"></text></g><g><title>compiler`&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (1 samples, 1.09%)</title><rect x="79.3478%" y="741" width="1.0870%" height="15" fill="rgb(236,23,11)" fg:x="73" fg:w="1"/><text x="79.5978%" y="751.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 1.09%)</title><rect x="79.3478%" y="725" width="1.0870%" height="15" fill="rgb(205,117,38)" fg:x="73" fg:w="1"/><text x="79.5978%" y="735.50"></text></g><g><title>compiler`alloc::fmt::format (1 samples, 1.09%)</title><rect x="80.4348%" y="725" width="1.0870%" height="15" fill="rgb(237,72,25)" fg:x="74" fg:w="1"/><text x="80.6848%" y="735.50"></text></g><g><title>compiler`core::fmt::write (1 samples, 1.09%)</title><rect x="80.4348%" y="709" width="1.0870%" height="15" fill="rgb(244,70,9)" fg:x="74" fg:w="1"/><text x="80.6848%" y="719.50"></text></g><g><title>compiler`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 1.09%)</title><rect x="80.4348%" y="693" width="1.0870%" height="15" fill="rgb(217,125,39)" fg:x="74" fg:w="1"/><text x="80.6848%" y="703.50"></text></g><g><title>compiler`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 1.09%)</title><rect x="80.4348%" y="677" width="1.0870%" height="15" fill="rgb(235,36,10)" fg:x="74" fg:w="1"/><text x="80.6848%" y="687.50"></text></g><g><title>compiler`alloc::raw_vec::finish_grow (1 samples, 1.09%)</title><rect x="80.4348%" y="661" width="1.0870%" height="15" fill="rgb(251,123,47)" fg:x="74" fg:w="1"/><text x="80.6848%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 1.09%)</title><rect x="80.4348%" y="645" width="1.0870%" height="15" fill="rgb(221,13,13)" fg:x="74" fg:w="1"/><text x="80.6848%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 1.09%)</title><rect x="80.4348%" y="629" width="1.0870%" height="15" fill="rgb(238,131,9)" fg:x="74" fg:w="1"/><text x="80.6848%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (1 samples, 1.09%)</title><rect x="80.4348%" y="613" width="1.0870%" height="15" fill="rgb(211,50,8)" fg:x="74" fg:w="1"/><text x="80.6848%" y="623.50"></text></g><g><title>compiler`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 2.17%)</title><rect x="80.4348%" y="757" width="2.1739%" height="15" fill="rgb(245,182,24)" fg:x="74" fg:w="2"/><text x="80.6848%" y="767.50">c..</text></g><g><title>compiler`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 2.17%)</title><rect x="80.4348%" y="741" width="2.1739%" height="15" fill="rgb(242,14,37)" fg:x="74" fg:w="2"/><text x="80.6848%" y="751.50">c..</text></g><g><title>compiler`ir::text_rep::statement_content (1 samples, 1.09%)</title><rect x="81.5217%" y="725" width="1.0870%" height="15" fill="rgb(246,228,12)" fg:x="75" fg:w="1"/><text x="81.7717%" y="735.50"></text></g><g><title>compiler`alloc::fmt::format (1 samples, 1.09%)</title><rect x="81.5217%" y="709" width="1.0870%" height="15" fill="rgb(213,55,15)" fg:x="75" fg:w="1"/><text x="81.7717%" y="719.50"></text></g><g><title>compiler`core::fmt::write (1 samples, 1.09%)</title><rect x="81.5217%" y="693" width="1.0870%" height="15" fill="rgb(209,9,3)" fg:x="75" fg:w="1"/><text x="81.7717%" y="703.50"></text></g><g><title>compiler`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 1.09%)</title><rect x="81.5217%" y="677" width="1.0870%" height="15" fill="rgb(230,59,30)" fg:x="75" fg:w="1"/><text x="81.7717%" y="687.50"></text></g><g><title>compiler`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 1.09%)</title><rect x="81.5217%" y="661" width="1.0870%" height="15" fill="rgb(209,121,21)" fg:x="75" fg:w="1"/><text x="81.7717%" y="671.50"></text></g><g><title>compiler`alloc::raw_vec::finish_grow (1 samples, 1.09%)</title><rect x="81.5217%" y="645" width="1.0870%" height="15" fill="rgb(220,109,13)" fg:x="75" fg:w="1"/><text x="81.7717%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 1.09%)</title><rect x="81.5217%" y="629" width="1.0870%" height="15" fill="rgb(232,18,1)" fg:x="75" fg:w="1"/><text x="81.7717%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 1.09%)</title><rect x="81.5217%" y="613" width="1.0870%" height="15" fill="rgb(215,41,42)" fg:x="75" fg:w="1"/><text x="81.7717%" y="623.50"></text></g><g><title>compiler`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 3.26%)</title><rect x="80.4348%" y="821" width="3.2609%" height="15" fill="rgb(224,123,36)" fg:x="74" fg:w="3"/><text x="80.6848%" y="831.50">com..</text></g><g><title>compiler`ir::text_rep::generate_text_rep (3 samples, 3.26%)</title><rect x="80.4348%" y="805" width="3.2609%" height="15" fill="rgb(240,125,3)" fg:x="74" fg:w="3"/><text x="80.6848%" y="815.50">com..</text></g><g><title>compiler`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 3.26%)</title><rect x="80.4348%" y="789" width="3.2609%" height="15" fill="rgb(205,98,50)" fg:x="74" fg:w="3"/><text x="80.6848%" y="799.50">com..</text></g><g><title>compiler`core::ops::function::impls::_&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3 samples, 3.26%)</title><rect x="80.4348%" y="773" width="3.2609%" height="15" fill="rgb(205,185,37)" fg:x="74" fg:w="3"/><text x="80.6848%" y="783.50">com..</text></g><g><title>compiler`ir::block::BasicBlock::get_statements (1 samples, 1.09%)</title><rect x="82.6087%" y="757" width="1.0870%" height="15" fill="rgb(238,207,15)" fg:x="76" fg:w="1"/><text x="82.8587%" y="767.50"></text></g><g><title>compiler`&lt;ir::variable::Variable as core::clone::Clone&gt;::clone (1 samples, 1.09%)</title><rect x="82.6087%" y="741" width="1.0870%" height="15" fill="rgb(213,199,42)" fg:x="76" fg:w="1"/><text x="82.8587%" y="751.50"></text></g><g><title>compiler`ir::text_rep::program_text_rep (4 samples, 4.35%)</title><rect x="80.4348%" y="837" width="4.3478%" height="15" fill="rgb(235,201,11)" fg:x="74" fg:w="4"/><text x="80.6848%" y="847.50">compi..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 1.09%)</title><rect x="83.6957%" y="821" width="1.0870%" height="15" fill="rgb(207,46,11)" fg:x="77" fg:w="1"/><text x="83.9457%" y="831.50"></text></g><g><title>compiler`backend::codegen (29 samples, 31.52%)</title><rect x="54.3478%" y="853" width="31.5217%" height="15" fill="rgb(241,35,35)" fg:x="50" fg:w="29"/><text x="54.5978%" y="863.50">compiler`backend::codegen</text></g><g><title>compiler`std::fs::DirBuilder::create_dir_all (1 samples, 1.09%)</title><rect x="84.7826%" y="837" width="1.0870%" height="15" fill="rgb(243,32,47)" fg:x="78" fg:w="1"/><text x="85.0326%" y="847.50"></text></g><g><title>libsystem_kernel.dylib`stat (1 samples, 1.09%)</title><rect x="84.7826%" y="821" width="1.0870%" height="15" fill="rgb(247,202,23)" fg:x="78" fg:w="1"/><text x="85.0326%" y="831.50"></text></g><g><title>compiler`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 1.09%)</title><rect x="85.8696%" y="853" width="1.0870%" height="15" fill="rgb(219,102,11)" fg:x="79" fg:w="1"/><text x="86.1196%" y="863.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (1 samples, 1.09%)</title><rect x="86.9565%" y="357" width="1.0870%" height="15" fill="rgb(243,110,44)" fg:x="80" fg:w="1"/><text x="87.2065%" y="367.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (1 samples, 1.09%)</title><rect x="86.9565%" y="341" width="1.0870%" height="15" fill="rgb(222,74,54)" fg:x="80" fg:w="1"/><text x="87.2065%" y="351.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (1 samples, 1.09%)</title><rect x="86.9565%" y="325" width="1.0870%" height="15" fill="rgb(216,99,12)" fg:x="80" fg:w="1"/><text x="87.2065%" y="335.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (1 samples, 1.09%)</title><rect x="86.9565%" y="309" width="1.0870%" height="15" fill="rgb(226,22,26)" fg:x="80" fg:w="1"/><text x="87.2065%" y="319.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (1 samples, 1.09%)</title><rect x="86.9565%" y="293" width="1.0870%" height="15" fill="rgb(217,163,10)" fg:x="80" fg:w="1"/><text x="87.2065%" y="303.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (1 samples, 1.09%)</title><rect x="86.9565%" y="277" width="1.0870%" height="15" fill="rgb(213,25,53)" fg:x="80" fg:w="1"/><text x="87.2065%" y="287.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (1 samples, 1.09%)</title><rect x="86.9565%" y="261" width="1.0870%" height="15" fill="rgb(252,105,26)" fg:x="80" fg:w="1"/><text x="87.2065%" y="271.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (1 samples, 1.09%)</title><rect x="86.9565%" y="245" width="1.0870%" height="15" fill="rgb(220,39,43)" fg:x="80" fg:w="1"/><text x="87.2065%" y="255.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (1 samples, 1.09%)</title><rect x="86.9565%" y="229" width="1.0870%" height="15" fill="rgb(229,68,48)" fg:x="80" fg:w="1"/><text x="87.2065%" y="239.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (1 samples, 1.09%)</title><rect x="86.9565%" y="213" width="1.0870%" height="15" fill="rgb(252,8,32)" fg:x="80" fg:w="1"/><text x="87.2065%" y="223.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (1 samples, 1.09%)</title><rect x="86.9565%" y="197" width="1.0870%" height="15" fill="rgb(223,20,43)" fg:x="80" fg:w="1"/><text x="87.2065%" y="207.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (1 samples, 1.09%)</title><rect x="86.9565%" y="181" width="1.0870%" height="15" fill="rgb(229,81,49)" fg:x="80" fg:w="1"/><text x="87.2065%" y="191.50"></text></g><g><title>compiler`ir::statement::_&lt;impl ir::dot::ToDot for ir::general::statement::Statement&lt;ir::block::BasicBlock,ir::block::weak::WeakBlockPtr&gt;&gt;::to_dot (1 samples, 1.09%)</title><rect x="86.9565%" y="165" width="1.0870%" height="15" fill="rgb(236,28,36)" fg:x="80" fg:w="1"/><text x="87.2065%" y="175.50"></text></g><g><title>compiler`alloc::str::_&lt;impl str&gt;::replace (1 samples, 1.09%)</title><rect x="86.9565%" y="149" width="1.0870%" height="15" fill="rgb(249,185,26)" fg:x="80" fg:w="1"/><text x="87.2065%" y="159.50"></text></g><g><title>compiler`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 1.09%)</title><rect x="86.9565%" y="133" width="1.0870%" height="15" fill="rgb(249,174,33)" fg:x="80" fg:w="1"/><text x="87.2065%" y="143.50"></text></g><g><title>compiler`alloc::raw_vec::finish_grow (1 samples, 1.09%)</title><rect x="86.9565%" y="117" width="1.0870%" height="15" fill="rgb(233,201,37)" fg:x="80" fg:w="1"/><text x="87.2065%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 1.09%)</title><rect x="86.9565%" y="101" width="1.0870%" height="15" fill="rgb(221,78,26)" fg:x="80" fg:w="1"/><text x="87.2065%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 1.09%)</title><rect x="86.9565%" y="85" width="1.0870%" height="15" fill="rgb(250,127,30)" fg:x="80" fg:w="1"/><text x="87.2065%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 1.09%)</title><rect x="86.9565%" y="69" width="1.0870%" height="15" fill="rgb(230,49,44)" fg:x="80" fg:w="1"/><text x="87.2065%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 1.09%)</title><rect x="86.9565%" y="53" width="1.0870%" height="15" fill="rgb(229,67,23)" fg:x="80" fg:w="1"/><text x="87.2065%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 1.09%)</title><rect x="86.9565%" y="37" width="1.0870%" height="15" fill="rgb(249,83,47)" fg:x="80" fg:w="1"/><text x="87.2065%" y="47.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="661" width="2.1739%" height="15" fill="rgb(215,43,3)" fg:x="80" fg:w="2"/><text x="87.2065%" y="671.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="645" width="2.1739%" height="15" fill="rgb(238,154,13)" fg:x="80" fg:w="2"/><text x="87.2065%" y="655.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="629" width="2.1739%" height="15" fill="rgb(219,56,2)" fg:x="80" fg:w="2"/><text x="87.2065%" y="639.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="613" width="2.1739%" height="15" fill="rgb(233,0,4)" fg:x="80" fg:w="2"/><text x="87.2065%" y="623.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="597" width="2.1739%" height="15" fill="rgb(235,30,7)" fg:x="80" fg:w="2"/><text x="87.2065%" y="607.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="581" width="2.1739%" height="15" fill="rgb(250,79,13)" fg:x="80" fg:w="2"/><text x="87.2065%" y="591.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="565" width="2.1739%" height="15" fill="rgb(211,146,34)" fg:x="80" fg:w="2"/><text x="87.2065%" y="575.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="549" width="2.1739%" height="15" fill="rgb(228,22,38)" fg:x="80" fg:w="2"/><text x="87.2065%" y="559.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="533" width="2.1739%" height="15" fill="rgb(235,168,5)" fg:x="80" fg:w="2"/><text x="87.2065%" y="543.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="517" width="2.1739%" height="15" fill="rgb(221,155,16)" fg:x="80" fg:w="2"/><text x="87.2065%" y="527.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="501" width="2.1739%" height="15" fill="rgb(215,215,53)" fg:x="80" fg:w="2"/><text x="87.2065%" y="511.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="485" width="2.1739%" height="15" fill="rgb(223,4,10)" fg:x="80" fg:w="2"/><text x="87.2065%" y="495.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="469" width="2.1739%" height="15" fill="rgb(234,103,6)" fg:x="80" fg:w="2"/><text x="87.2065%" y="479.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="453" width="2.1739%" height="15" fill="rgb(227,97,0)" fg:x="80" fg:w="2"/><text x="87.2065%" y="463.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="437" width="2.1739%" height="15" fill="rgb(234,150,53)" fg:x="80" fg:w="2"/><text x="87.2065%" y="447.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="421" width="2.1739%" height="15" fill="rgb(228,201,54)" fg:x="80" fg:w="2"/><text x="87.2065%" y="431.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="405" width="2.1739%" height="15" fill="rgb(222,22,37)" fg:x="80" fg:w="2"/><text x="87.2065%" y="415.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="389" width="2.1739%" height="15" fill="rgb(237,53,32)" fg:x="80" fg:w="2"/><text x="87.2065%" y="399.50">c..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (2 samples, 2.17%)</title><rect x="86.9565%" y="373" width="2.1739%" height="15" fill="rgb(233,25,53)" fg:x="80" fg:w="2"/><text x="87.2065%" y="383.50">c..</text></g><g><title>compiler`ir::statement::_&lt;impl ir::dot::ToDot for ir::general::statement::Statement&lt;ir::block::BasicBlock,ir::block::weak::WeakBlockPtr&gt;&gt;::to_dot (1 samples, 1.09%)</title><rect x="88.0435%" y="357" width="1.0870%" height="15" fill="rgb(210,40,34)" fg:x="81" fg:w="1"/><text x="88.2935%" y="367.50"></text></g><g><title>compiler`alloc::str::_&lt;impl str&gt;::replace (1 samples, 1.09%)</title><rect x="88.0435%" y="341" width="1.0870%" height="15" fill="rgb(241,220,44)" fg:x="81" fg:w="1"/><text x="88.2935%" y="351.50"></text></g><g><title>compiler`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 1.09%)</title><rect x="88.0435%" y="325" width="1.0870%" height="15" fill="rgb(235,28,35)" fg:x="81" fg:w="1"/><text x="88.2935%" y="335.50"></text></g><g><title>compiler`alloc::raw_vec::finish_grow (1 samples, 1.09%)</title><rect x="88.0435%" y="309" width="1.0870%" height="15" fill="rgb(210,56,17)" fg:x="81" fg:w="1"/><text x="88.2935%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 1.09%)</title><rect x="88.0435%" y="293" width="1.0870%" height="15" fill="rgb(224,130,29)" fg:x="81" fg:w="1"/><text x="88.2935%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 1.09%)</title><rect x="88.0435%" y="277" width="1.0870%" height="15" fill="rgb(235,212,8)" fg:x="81" fg:w="1"/><text x="88.2935%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 1.09%)</title><rect x="88.0435%" y="261" width="1.0870%" height="15" fill="rgb(223,33,50)" fg:x="81" fg:w="1"/><text x="88.2935%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 1.09%)</title><rect x="88.0435%" y="245" width="1.0870%" height="15" fill="rgb(219,149,13)" fg:x="81" fg:w="1"/><text x="88.2935%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 1.09%)</title><rect x="88.0435%" y="229" width="1.0870%" height="15" fill="rgb(250,156,29)" fg:x="81" fg:w="1"/><text x="88.2935%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 1.09%)</title><rect x="88.0435%" y="213" width="1.0870%" height="15" fill="rgb(216,193,19)" fg:x="81" fg:w="1"/><text x="88.2935%" y="223.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (3 samples, 3.26%)</title><rect x="86.9565%" y="693" width="3.2609%" height="15" fill="rgb(216,135,14)" fg:x="80" fg:w="3"/><text x="87.2065%" y="703.50">com..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (3 samples, 3.26%)</title><rect x="86.9565%" y="677" width="3.2609%" height="15" fill="rgb(241,47,5)" fg:x="80" fg:w="3"/><text x="87.2065%" y="687.50">com..</text></g><g><title>compiler`ir::statement::_&lt;impl ir::dot::ToDot for ir::general::statement::Statement&lt;ir::block::BasicBlock,ir::block::weak::WeakBlockPtr&gt;&gt;::to_dot (1 samples, 1.09%)</title><rect x="89.1304%" y="661" width="1.0870%" height="15" fill="rgb(233,42,35)" fg:x="82" fg:w="1"/><text x="89.3804%" y="671.50"></text></g><g><title>compiler`alloc::fmt::format (1 samples, 1.09%)</title><rect x="89.1304%" y="645" width="1.0870%" height="15" fill="rgb(231,13,6)" fg:x="82" fg:w="1"/><text x="89.3804%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 1.09%)</title><rect x="89.1304%" y="629" width="1.0870%" height="15" fill="rgb(207,181,40)" fg:x="82" fg:w="1"/><text x="89.3804%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 1.09%)</title><rect x="89.1304%" y="613" width="1.0870%" height="15" fill="rgb(254,173,49)" fg:x="82" fg:w="1"/><text x="89.3804%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 1.09%)</title><rect x="89.1304%" y="597" width="1.0870%" height="15" fill="rgb(221,1,38)" fg:x="82" fg:w="1"/><text x="89.3804%" y="607.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (4 samples, 4.35%)</title><rect x="86.9565%" y="709" width="4.3478%" height="15" fill="rgb(206,124,46)" fg:x="80" fg:w="4"/><text x="87.2065%" y="719.50">compi..</text></g><g><title>compiler`ir::statement::_&lt;impl ir::dot::ToDot for ir::general::statement::Statement&lt;ir::block::BasicBlock,ir::block::weak::WeakBlockPtr&gt;&gt;::to_dot (1 samples, 1.09%)</title><rect x="90.2174%" y="693" width="1.0870%" height="15" fill="rgb(249,21,11)" fg:x="83" fg:w="1"/><text x="90.4674%" y="703.50"></text></g><g><title>compiler`alloc::fmt::format (1 samples, 1.09%)</title><rect x="90.2174%" y="677" width="1.0870%" height="15" fill="rgb(222,201,40)" fg:x="83" fg:w="1"/><text x="90.4674%" y="687.50"></text></g><g><title>compiler`core::fmt::write (1 samples, 1.09%)</title><rect x="90.2174%" y="661" width="1.0870%" height="15" fill="rgb(235,61,29)" fg:x="83" fg:w="1"/><text x="90.4674%" y="671.50"></text></g><g><title>compiler`core::fmt::Formatter::pad_integral (1 samples, 1.09%)</title><rect x="90.2174%" y="645" width="1.0870%" height="15" fill="rgb(219,207,3)" fg:x="83" fg:w="1"/><text x="90.4674%" y="655.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (5 samples, 5.43%)</title><rect x="86.9565%" y="725" width="5.4348%" height="15" fill="rgb(222,56,46)" fg:x="80" fg:w="5"/><text x="87.2065%" y="735.50">compile..</text></g><g><title>compiler`ir::statement::_&lt;impl ir::dot::ToDot for ir::general::statement::Statement&lt;ir::block::BasicBlock,ir::block::weak::WeakBlockPtr&gt;&gt;::to_dot (1 samples, 1.09%)</title><rect x="91.3043%" y="709" width="1.0870%" height="15" fill="rgb(239,76,54)" fg:x="84" fg:w="1"/><text x="91.5543%" y="719.50"></text></g><g><title>compiler`alloc::str::_&lt;impl str&gt;::replace (1 samples, 1.09%)</title><rect x="91.3043%" y="693" width="1.0870%" height="15" fill="rgb(231,124,27)" fg:x="84" fg:w="1"/><text x="91.5543%" y="703.50"></text></g><g><title>compiler`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 1.09%)</title><rect x="91.3043%" y="677" width="1.0870%" height="15" fill="rgb(249,195,6)" fg:x="84" fg:w="1"/><text x="91.5543%" y="687.50"></text></g><g><title>compiler`DYLD-STUB$$malloc (1 samples, 1.09%)</title><rect x="91.3043%" y="661" width="1.0870%" height="15" fill="rgb(237,174,47)" fg:x="84" fg:w="1"/><text x="91.5543%" y="671.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (6 samples, 6.52%)</title><rect x="86.9565%" y="757" width="6.5217%" height="15" fill="rgb(206,201,31)" fg:x="80" fg:w="6"/><text x="87.2065%" y="767.50">compiler`..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (6 samples, 6.52%)</title><rect x="86.9565%" y="741" width="6.5217%" height="15" fill="rgb(231,57,52)" fg:x="80" fg:w="6"/><text x="87.2065%" y="751.50">compiler`..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 1.09%)</title><rect x="92.3913%" y="725" width="1.0870%" height="15" fill="rgb(248,177,22)" fg:x="85" fg:w="1"/><text x="92.6413%" y="735.50"></text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (7 samples, 7.61%)</title><rect x="86.9565%" y="773" width="7.6087%" height="15" fill="rgb(215,211,37)" fg:x="80" fg:w="7"/><text x="87.2065%" y="783.50">compiler`&lt;..</text></g><g><title>compiler`alloc::fmt::format (1 samples, 1.09%)</title><rect x="93.4783%" y="757" width="1.0870%" height="15" fill="rgb(241,128,51)" fg:x="86" fg:w="1"/><text x="93.7283%" y="767.50"></text></g><g><title>compiler`core::fmt::write (1 samples, 1.09%)</title><rect x="93.4783%" y="741" width="1.0870%" height="15" fill="rgb(227,165,31)" fg:x="86" fg:w="1"/><text x="93.7283%" y="751.50"></text></g><g><title>compiler`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 1.09%)</title><rect x="93.4783%" y="725" width="1.0870%" height="15" fill="rgb(228,167,24)" fg:x="86" fg:w="1"/><text x="93.7283%" y="735.50"></text></g><g><title>compiler`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 1.09%)</title><rect x="93.4783%" y="709" width="1.0870%" height="15" fill="rgb(228,143,12)" fg:x="86" fg:w="1"/><text x="93.7283%" y="719.50"></text></g><g><title>compiler`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 1.09%)</title><rect x="93.4783%" y="693" width="1.0870%" height="15" fill="rgb(249,149,8)" fg:x="86" fg:w="1"/><text x="93.7283%" y="703.50"></text></g><g><title>compiler`alloc::raw_vec::finish_grow (1 samples, 1.09%)</title><rect x="93.4783%" y="677" width="1.0870%" height="15" fill="rgb(243,35,44)" fg:x="86" fg:w="1"/><text x="93.7283%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 1.09%)</title><rect x="93.4783%" y="661" width="1.0870%" height="15" fill="rgb(246,89,9)" fg:x="86" fg:w="1"/><text x="93.7283%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 1.09%)</title><rect x="93.4783%" y="645" width="1.0870%" height="15" fill="rgb(233,213,13)" fg:x="86" fg:w="1"/><text x="93.7283%" y="655.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 1.09%)</title><rect x="93.4783%" y="629" width="1.0870%" height="15" fill="rgb(233,141,41)" fg:x="86" fg:w="1"/><text x="93.7283%" y="639.50"></text></g><g><title>compiler`&lt;ir::function::FunctionDefinition as ir::dot::ToDot&gt;::to_dot (8 samples, 8.70%)</title><rect x="86.9565%" y="837" width="8.6957%" height="15" fill="rgb(239,167,4)" fg:x="80" fg:w="8"/><text x="87.2065%" y="847.50">compiler`&lt;ir..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (8 samples, 8.70%)</title><rect x="86.9565%" y="821" width="8.6957%" height="15" fill="rgb(209,217,16)" fg:x="80" fg:w="8"/><text x="87.2065%" y="831.50">compiler`&lt;ir..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (8 samples, 8.70%)</title><rect x="86.9565%" y="805" width="8.6957%" height="15" fill="rgb(219,88,35)" fg:x="80" fg:w="8"/><text x="87.2065%" y="815.50">compiler`&lt;ir..</text></g><g><title>compiler`&lt;ir::block::BasicBlock as ir::dot::ToDot&gt;::to_dot (8 samples, 8.70%)</title><rect x="86.9565%" y="789" width="8.6957%" height="15" fill="rgb(220,193,23)" fg:x="80" fg:w="8"/><text x="87.2065%" y="799.50">compiler`&lt;ir..</text></g><g><title>compiler`graphviz::args::Args::add (1 samples, 1.09%)</title><rect x="94.5652%" y="773" width="1.0870%" height="15" fill="rgb(230,90,52)" fg:x="87" fg:w="1"/><text x="94.8152%" y="783.50"></text></g><g><title>compiler`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 1.09%)</title><rect x="94.5652%" y="757" width="1.0870%" height="15" fill="rgb(252,106,19)" fg:x="87" fg:w="1"/><text x="94.8152%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 1.09%)</title><rect x="94.5652%" y="741" width="1.0870%" height="15" fill="rgb(206,74,20)" fg:x="87" fg:w="1"/><text x="94.8152%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 1.09%)</title><rect x="94.5652%" y="725" width="1.0870%" height="15" fill="rgb(230,138,44)" fg:x="87" fg:w="1"/><text x="94.8152%" y="735.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 1.09%)</title><rect x="94.5652%" y="709" width="1.0870%" height="15" fill="rgb(235,182,43)" fg:x="87" fg:w="1"/><text x="94.8152%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 1.09%)</title><rect x="94.5652%" y="693" width="1.0870%" height="15" fill="rgb(242,16,51)" fg:x="87" fg:w="1"/><text x="94.8152%" y="703.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 1.09%)</title><rect x="95.6522%" y="773" width="1.0870%" height="15" fill="rgb(248,9,4)" fg:x="88" fg:w="1"/><text x="95.9022%" y="783.50"></text></g><g><title>compiler`core::ptr::drop_in_place&lt;graphviz::Entry&gt; (2 samples, 2.17%)</title><rect x="95.6522%" y="821" width="2.1739%" height="15" fill="rgb(210,31,22)" fg:x="88" fg:w="2"/><text x="95.9022%" y="831.50">c..</text></g><g><title>compiler`core::ptr::drop_in_place&lt;graphviz::Entry&gt; (2 samples, 2.17%)</title><rect x="95.6522%" y="805" width="2.1739%" height="15" fill="rgb(239,54,39)" fg:x="88" fg:w="2"/><text x="95.9022%" y="815.50">c..</text></g><g><title>compiler`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 2.17%)</title><rect x="95.6522%" y="789" width="2.1739%" height="15" fill="rgb(230,99,41)" fg:x="88" fg:w="2"/><text x="95.9022%" y="799.50">c..</text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 1.09%)</title><rect x="96.7391%" y="773" width="1.0870%" height="15" fill="rgb(253,106,12)" fg:x="89" fg:w="1"/><text x="96.9891%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 1.09%)</title><rect x="96.7391%" y="757" width="1.0870%" height="15" fill="rgb(213,46,41)" fg:x="89" fg:w="1"/><text x="96.9891%" y="767.50"></text></g><g><title>compiler`graphviz::edge::Edge::line (1 samples, 1.09%)</title><rect x="97.8261%" y="789" width="1.0870%" height="15" fill="rgb(215,133,35)" fg:x="90" fg:w="1"/><text x="98.0761%" y="799.50"></text></g><g><title>compiler`alloc::fmt::format (1 samples, 1.09%)</title><rect x="97.8261%" y="773" width="1.0870%" height="15" fill="rgb(213,28,5)" fg:x="90" fg:w="1"/><text x="98.0761%" y="783.50"></text></g><g><title>compiler`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 1.09%)</title><rect x="97.8261%" y="757" width="1.0870%" height="15" fill="rgb(215,77,49)" fg:x="90" fg:w="1"/><text x="98.0761%" y="767.50"></text></g><g><title>all (92 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(248,100,22)" fg:x="0" fg:w="92"/><text x="0.2500%" y="991.50"></text></g><g><title>dyld`start (92 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(208,67,9)" fg:x="0" fg:w="92"/><text x="0.2500%" y="975.50">dyld`start</text></g><g><title>compiler`main (92 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(219,133,21)" fg:x="0" fg:w="92"/><text x="0.2500%" y="959.50">compiler`main</text></g><g><title>compiler`std::rt::lang_start_internal (91 samples, 98.91%)</title><rect x="1.0870%" y="933" width="98.9130%" height="15" fill="rgb(246,46,29)" fg:x="1" fg:w="91"/><text x="1.3370%" y="943.50">compiler`std::rt::lang_start_internal</text></g><g><title>compiler`std::rt::lang_start::_{{closure}} (91 samples, 98.91%)</title><rect x="1.0870%" y="917" width="98.9130%" height="15" fill="rgb(246,185,52)" fg:x="1" fg:w="91"/><text x="1.3370%" y="927.50">compiler`std::rt::lang_start::_{{closure}}</text></g><g><title>compiler`std::sys_common::backtrace::__rust_begin_short_backtrace (91 samples, 98.91%)</title><rect x="1.0870%" y="901" width="98.9130%" height="15" fill="rgb(252,136,11)" fg:x="1" fg:w="91"/><text x="1.3370%" y="911.50">compiler`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>compiler`compiler::main (91 samples, 98.91%)</title><rect x="1.0870%" y="885" width="98.9130%" height="15" fill="rgb(219,138,53)" fg:x="1" fg:w="91"/><text x="1.3370%" y="895.50">compiler`compiler::main</text></g><g><title>compiler`compiler::run (91 samples, 98.91%)</title><rect x="1.0870%" y="869" width="98.9130%" height="15" fill="rgb(211,51,23)" fg:x="1" fg:w="91"/><text x="1.3370%" y="879.50">compiler`compiler::run</text></g><g><title>compiler`ir::Program::to_dot (12 samples, 13.04%)</title><rect x="86.9565%" y="853" width="13.0435%" height="15" fill="rgb(247,221,28)" fg:x="80" fg:w="12"/><text x="87.2065%" y="863.50">compiler`ir::Program..</text></g><g><title>compiler`graphviz::graph::RootGraph::finalize (4 samples, 4.35%)</title><rect x="95.6522%" y="837" width="4.3478%" height="15" fill="rgb(251,222,45)" fg:x="88" fg:w="4"/><text x="95.9022%" y="847.50">compi..</text></g><g><title>compiler`graphviz::subgraph::SubGraph::line (2 samples, 2.17%)</title><rect x="97.8261%" y="821" width="2.1739%" height="15" fill="rgb(217,162,53)" fg:x="90" fg:w="2"/><text x="98.0761%" y="831.50">c..</text></g><g><title>compiler`graphviz::subgraph::SubGraph::line (2 samples, 2.17%)</title><rect x="97.8261%" y="805" width="2.1739%" height="15" fill="rgb(229,93,14)" fg:x="90" fg:w="2"/><text x="98.0761%" y="815.50">c..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 1.09%)</title><rect x="98.9130%" y="789" width="1.0870%" height="15" fill="rgb(209,67,49)" fg:x="91" fg:w="1"/><text x="99.1630%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 1.09%)</title><rect x="98.9130%" y="773" width="1.0870%" height="15" fill="rgb(213,87,29)" fg:x="91" fg:w="1"/><text x="99.1630%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 1.09%)</title><rect x="98.9130%" y="757" width="1.0870%" height="15" fill="rgb(205,151,52)" fg:x="91" fg:w="1"/><text x="99.1630%" y="767.50"></text></g></svg></svg>